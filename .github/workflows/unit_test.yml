name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      # Restore cached Docker image (if available)
      - name: Set up Docker image cache
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: .docker-cache/docker-cache.tar
          key: ${{ runner.os }}-docker-${{ hashFiles('.devcontainer/Dockerfile') }}

      - name: Load cached Docker image
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: docker load -i .docker-cache/docker-cache.tar

      - name: Build Docker image (if cache miss)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          # Build the Docker image from the custom Dockerfile
          docker build -f .devcontainer/Dockerfile -t ctmd-dev:latest .
          # Save the built image as a tar archive for caching
          mkdir -p .docker-cache
          docker save -o .docker-cache/docker-cache.tar ctmd-dev:latest

      # Restore Bazel cache (local build cache) if available
      - name: Restore Bazel cache
        id: bazel-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/bazel
          key: ${{ runner.os }}-bazel-cache

      - name: Run Bazel build and tests inside container
        run: |
          # Run the Docker container with the workspace mounted at /workspaces/ctmd
          # Also mount the host's Bazel cache directory into the container for reuse
          docker run --rm \
            -v ${{ github.workspace }}:/workspaces/ctmd \
            -v /home/runner/.cache/bazel:/root/.cache/bazel \
            ctmd-dev:latest \
            bash -c "bazel build //... && bazel test //..."