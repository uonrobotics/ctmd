name: Unit test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout source
        uses: actions/checkout@v3

      # Docker image cache setup
      - name: Set up Docker image cache
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: .docker-cache/docker-cache.tar
          key: ${{ runner.os }}-docker-${{ hashFiles('.devcontainer/DockerFile') }}
          restore-keys: ${{ runner.os }}-docker-

      # Load Docker image if cache hit
      - name: Load cached Docker image
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          echo "Docker cache hit, loading image..."
          docker load -i .docker-cache/docker-cache.tar

      # Build Docker image if cache miss
      - name: Build Docker image (if cache miss)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          echo "Docker cache miss, building image..."
          docker build -f .devcontainer/DockerFile -t ctmd-dev:latest .
          mkdir -p .docker-cache
          docker save -o .docker-cache/docker-cache.tar ctmd-dev:latest

      # Set up Bazel with Bazelisk and enable cache
      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.14.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      # Run tests inside Docker container
      - name: Bazel Test
        run: bazelisk test tests/...
