FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV GCC_VER=13
ENV PREFIX=/opt/gcc-$GCC_VER
ENV NVPTX_INSTALL_DIR=/usr/local/nvptx-tools

# 1. 필수 패키지
RUN apt-get update && apt-get install -y \
    build-essential \
    g++ \
    wget \
    git \
    curl \
    python3 \
    python3-pip \
    zlib1g-dev \
    libgmp-dev \
    libmpfr-dev \
    libmpc-dev \
    flex \
    bison \
    texinfo \
    libisl-dev \
    ninja-build \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# 2. Bazel 설치
RUN curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64 -o /usr/local/bin/bazel && \
    chmod +x /usr/local/bin/bazel && \
    echo "BAZELISK_BASE_VERSION=7.5.0" >> /etc/environment

# 3. nvptx-tools 설치
RUN git clone https://github.com/SourceryTools/nvptx-tools /tmp/nvptx-tools && \
    cd /tmp/nvptx-tools && ./configure --prefix=$NVPTX_INSTALL_DIR && \
    make -j$(nproc) && make install && rm -rf /tmp/nvptx-tools

# 4. GCC 소스 받기
RUN git clone --depth=1 --branch releases/gcc-13 https://gcc.gnu.org/git/gcc.git /opt/gcc-src && \
    cd /opt/gcc-src && ./contrib/download_prerequisites

# 5. nvptx-newlib 설치 → gcc/newlib 로 이동
RUN git clone https://github.com/SourceryTools/nvptx-newlib.git /opt/nvptx-newlib && \
    mv /opt/nvptx-newlib/newlib /opt/gcc-src/newlib

# 6. nvptx device compiler 빌드 (mkoffload 포함)
RUN mkdir -p /opt/nvptx-build && cd /opt/nvptx-build && \
    /opt/gcc-src/configure \
        --target=nvptx-none \
        --with-build-sysroot=/dev/null \
        --enable-as-accelerator-for=x86_64-pc-linux-gnu \
        --enable-newlib-io-long-long \
        --without-headers \
        --disable-shared \
        --disable-libssp \
        --disable-multilib \
        --enable-languages=c,c++ \
        --prefix=$NVPTX_INSTALL_DIR && \
    make -j$(nproc) all && make install

ENV PATH=$NVPTX_INSTALL_DIR/bin:$PATH

# 7. Host GCC 빌드
RUN mkdir -p /opt/gcc-build && cd /opt/gcc-build && \
    ../gcc-src/configure \
        --prefix=$PREFIX \
        --enable-languages=c,c++ \
        --disable-multilib \
        --enable-offload-targets=nvptx-none=$NVPTX_INSTALL_DIR \
        --with-build-time-tools=$NVPTX_INSTALL_DIR/bin \
        --with-toolexeclibdir=$NVPTX_INSTALL_DIR/lib \
        --with-cuda-driver=/usr/local/cuda \
        --with-cuda-lib=/usr/local/cuda/lib64 \
        --enable-checking=release \
        --enable-gomp && \
    make -j$(nproc) && make install

# 8. 환경 변수 설정
ENV PATH=/opt/gcc-13/bin:$PATH
ENV PATH=$PREFIX/bin:$NVPTX_INSTALL_DIR/bin:$PATH
ENV LD_LIBRARY_PATH=$PREFIX/lib64:$LD_LIBRARY_PATH

# 8-1. GCC 기본 버전으로 등록
RUN ln -sf /opt/gcc-13/bin/gcc /usr/bin/gcc && \
    ln -sf /opt/gcc-13/bin/g++ /usr/bin/g++

# 9. 기본 작업 디렉토리
WORKDIR /workspace
