# Dockerfile: Build GCC 13 with NVPTX offloading (including mkoffload)
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

# Ensure CUDA's ptxas is in PATH
ENV PATH=/usr/local/cuda/bin:$PATH

# Install required packages for building GCC and NVPTX tools
RUN apt-get update && apt-get install -y \
    build-essential git wget bison flex gawk texinfo libzstd-dev \
    bzip2 xz-utils && \
    rm -rf /var/lib/apt/lists/*

# Define installation prefix for GCC
ENV PREFIX=/opt/gcc-13

# Clone NVPTX tools, NVPTX newlib, and GCC source (GCC 13 branch), then get GCC prerequisites
RUN git clone https://github.com/MentorEmbedded/nvptx-tools.git /tmp/nvptx-tools && \
    git clone https://github.com/MentorEmbedded/nvptx-newlib.git /tmp/nvptx-newlib && \
    git clone --depth 1 --branch releases/gcc-13 https://github.com/gcc-mirror/gcc.git /tmp/gcc-13 && \
    cd /tmp/gcc-13 && ./contrib/download_prerequisites

# Build and install nvptx-tools (provides assembler/linker tools for nvptx target)
RUN cd /tmp/nvptx-tools && \
    ./configure --with-cuda-driver-include=/usr/local/cuda/include \
                --with-cuda-driver-lib=/usr/local/cuda/lib64 \
                --prefix=/usr/local && \
    make -j$(nproc) && make install

# Build NVPTX offload target compiler (device compiler)
# Link nvptx-newlib into GCC source, configure for nvptx target, then build and install
RUN ln -s /tmp/nvptx-newlib/newlib /tmp/gcc-13/newlib && \
    mkdir /tmp/build-nvptx && cd /tmp/build-nvptx && \
    /tmp/gcc-13/configure --target=nvptx-none \
        --enable-as-accelerator-for=x86_64-pc-linux-gnu \
        --with-build-time-tools=/usr/local/nvptx-none/bin \
        --disable-sjlj-exceptions --enable-newlib-io-long-long \
        --enable-languages=c,c++,fortran,lto \
        --prefix=$PREFIX && \
    make -j$(nproc) && make install && \
    rm /tmp/gcc-13/newlib  # remove newlib symlink after installing device compiler

# Build host GCC (x86_64) with NVPTX offloading support (this produces mkoffload)
RUN mkdir /tmp/build-host && cd /tmp/build-host && \
    /tmp/gcc-13/configure --build=x86_64-pc-linux-gnu --host=x86_64-pc-linux-gnu \
        --target=x86_64-pc-linux-gnu \
        --enable-offload-targets=nvptx-none \
        --with-cuda-driver-include=/usr/local/cuda/include \
        --with-cuda-driver-lib=/usr/local/cuda/lib64 \
        --disable-multilib --disable-bootstrap \
        --enable-languages=c,c++,fortran,lto \
        --prefix=$PREFIX && \
    make -j$(nproc) && make install

# Verify that mkoffload is present in the GCC libexec directory for the host compiler
RUN find $PREFIX/libexec/gcc/x86_64-pc-linux-gnu -name mkoffload

# Clean up source and build directories to reduce image size (optional)
RUN rm -rf /tmp/nvptx-tools /tmp/nvptx-newlib /tmp/gcc-13 /tmp/build-nvptx /tmp/build-host

# Set Build GCC as default compiler
RUN ln -sf /opt/gcc-13/bin/gcc /usr/bin/gcc && \
    ln -sf /opt/gcc-13/bin/g++ /usr/bin/g++

# Install tools
RUN apt-get update && apt-get install -y curl

# Install bazel
RUN curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64 -o /usr/local/bin/bazel && \
    chmod +x /usr/local/bin/bazel && \
    echo "BAZELISK_BASE_VERSION=7.5.0" >> /etc/environment
