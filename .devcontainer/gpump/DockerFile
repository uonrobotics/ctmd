# Check further information at https://gcc.gnu.org/wiki/Offloading

FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

ENV NVPTX_TOOLS_PREFIX=/opt/nvptx-tools
ENV GCC_PREFIX=/opt/gcc-13
ENV PATH=/usr/local/cuda/bin:/opt/gcc-13/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/gcc-13/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

# Install necessary packages
RUN apt-get update && apt-get install -y \
    build-essential git wget curl bison flex gawk texinfo libzstd-dev \
    bzip2 xz-utils && \
    rm -rf /var/lib/apt/lists/*

# Clone nvptx-tools, nvptx-newlib, and gcc-13
RUN git clone https://github.com/MentorEmbedded/nvptx-tools.git /tmp/nvptx-tools && \
    git clone https://github.com/MentorEmbedded/nvptx-newlib.git /tmp/nvptx-newlib && \
    git clone --branch releases/gcc-13 https://gcc.gnu.org/git/gcc.git /tmp/gcc-13
RUN cd /tmp/gcc-13 && \
    ./contrib/download_prerequisites

# Build nvptx-tools
RUN cd /tmp/nvptx-tools && \
    ./configure \
        --prefix=$NVPTX_TOOLS_PREFIX && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/nvptx-tools

# Build device compiler (nvptx-none) with newlib
RUN ln -s /tmp/nvptx-newlib/newlib /tmp/gcc-13/newlib
RUN mkdir /tmp/build-nvptx && \
    cd /tmp/build-nvptx && \
    /tmp/gcc-13/configure \
        --target=nvptx-none \
        --with-arch=sm_70 \
        --enable-as-accelerator-for=x86_64-pc-linux-gnu \
        --with-build-time-tools=$NVPTX_TOOLS_PREFIX/nvptx-none/bin \
        --disable-sjlj-exceptions \
        --enable-newlib-io-long-long \
        --enable-languages=c,c++,fortran,lto \
        --prefix=$GCC_PREFIX && \
    make -j$(nproc) V=1 2>&1 | tee /tmp/device_full_build.log && \
    make install
RUN rm -rf /tmp/gcc-13/newlib

# Build host GCC with NVPTX offloading support
RUN mkdir /tmp/build-host && \
    cd /tmp/build-host && \
    /tmp/gcc-13/configure \
        --build=x86_64-pc-linux-gnu \
        --host=x86_64-pc-linux-gnu \
        --target=x86_64-pc-linux-gnu \
        --enable-offload-targets=nvptx-none=$GCC_PREFIX/lib/gcc/x86_64-pc-linux-gnu/13.3.1/accel/nvptx-none \
        --with-cuda-driver-include=/usr/local/cuda/include \
        --with-cuda-driver-lib=/usr/local/cuda/lib64/stubs \
        --disable-bootstrap \
        --disable-multilib \
        --enable-languages=c,c++,fortran,lto \
        --prefix=$GCC_PREFIX && \
    make -j$(nproc) V=1 2>&1 | tee /tmp/host_full_build.log && \
    make install

# Clean up temporary files
RUN rm -rf /tmp/build-nvptx && \
    rm -rf /tmp/build-host && \
    rm -rf /tmp/gcc-13 && \
    rm -rf /tmp/nvptx-newlib

# Copy nvptx tools to the GCC directory
RUN cd /opt/gcc-13/libexec/gcc/x86_64-pc-linux-gnu/13.3.1/accel/nvptx-none && \
    for tool in as ld ar nm ranlib; do \
        cp /opt/nvptx-tools/bin/nvptx-none-$tool $tool; \
    done

# Set as default compiler
RUN ln -sf $GCC_PREFIX/bin/gcc /usr/bin/gcc && \
    ln -sf $GCC_PREFIX/bin/g++ /usr/bin/g++

# Install Bazelisk
RUN curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64 -o /usr/local/bin/bazel && \
    chmod +x /usr/local/bin/bazel && \
    echo "BAZELISK_BASE_VERSION=7.5.0" >> /etc/environment

# Go back to the workspace
WORKDIR /workspaces
